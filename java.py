{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b2d84b01-08e1-41a2-91f9-56a6fd5b9ba9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r\"C:\\Users\\nhumb\\Downloads\\Compressed\\archive\\weather_data.csv\"  # Update this to your dataset path\n",
    "data = pd.read_csv(file_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f6e4700f-b0c1-47c5-8acc-e81ae6731b53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Location  Date_Time  Temperature_C  Humidity_pct  Precipitation_mm  \\\n",
      "0  Chicago   1/6/2024      26.786811     31.513614          0.496024   \n",
      "1  Chicago  4/16/2024      17.587820     32.817923          0.128803   \n",
      "2  Chicago   4/1/2024      -2.562660     30.356593          2.624328   \n",
      "3  Chicago   4/3/2024       7.166150     50.377273          4.669553   \n",
      "4  Chicago   4/5/2024      38.386233     74.049712          6.792913   \n",
      "\n",
      "   Wind_Speed_kmh  \n",
      "0       22.980095  \n",
      "1        0.234146  \n",
      "2        2.601357  \n",
      "3       11.841165  \n",
      "4        3.292467  \n"
     ]
    }
   ],
   "source": [
    "# Display the first few rows of the dataset\n",
    "print(data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0ea0fcb1-7e87-48b5-a92b-57350a56df32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Maximum Values:\n",
      "Humidity_pct        89.999977\n",
      "Temperature_C       39.999801\n",
      "Precipitation_mm    14.971583\n",
      "Wind_Speed_kmh      29.999973\n",
      "dtype: float64\n",
      "\n",
      "Minimum Values:\n",
      "Humidity_pct        30.000009\n",
      "Temperature_C      -19.969311\n",
      "Precipitation_mm     0.000009\n",
      "Wind_Speed_kmh       0.000051\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Calculate the maximum and minimum values for each attribute\n",
    "max_values = data[['Humidity_pct', 'Temperature_C', 'Precipitation_mm', 'Wind_Speed_kmh']].max()\n",
    "min_values = data[['Humidity_pct', 'Temperature_C', 'Precipitation_mm', 'Wind_Speed_kmh']].min()\n",
    "\n",
    "# Display maximum and minimum values\n",
    "print(\"\\nMaximum Values:\")\n",
    "print(max_values)\n",
    "\n",
    "print(\"\\nMinimum Values:\")\n",
    "print(min_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ceb8fec6-ec31-4dde-a725-eb8e52edd926",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Updated Dataset with Crop Yield:\n",
      "  Location  Date_Time  Temperature_C  Humidity_pct  Precipitation_mm  \\\n",
      "0  Chicago   1/6/2024      26.786811     31.513614          0.496024   \n",
      "1  Chicago  4/16/2024      17.587820     32.817923          0.128803   \n",
      "2  Chicago   4/1/2024      -2.562660     30.356593          2.624328   \n",
      "3  Chicago   4/3/2024       7.166150     50.377273          4.669553   \n",
      "4  Chicago   4/5/2024      38.386233     74.049712          6.792913   \n",
      "\n",
      "   Wind_Speed_kmh Crop_Yield  \n",
      "0       22.980095        Bad  \n",
      "1        0.234146        Bad  \n",
      "2        2.601357        Bad  \n",
      "3       11.841165        Bad  \n",
      "4        3.292467        Bad  \n"
     ]
    }
   ],
   "source": [
    "# Function to categorize crop yield based on weather attributes\n",
    "def categorize_yield(row):\n",
    "    score = 0  # Initialize score\n",
    "    \n",
    "    # Temperature check\n",
    "    if 15 <= row['Temperature_C'] <= 25:\n",
    "        score += 1  # Good\n",
    "    elif 10 <= row['Temperature_C'] < 15 or 25 < row['Temperature_C'] <= 30:\n",
    "        score += 0  # Moderate\n",
    "    else:\n",
    "        score -= 1  # Bad\n",
    "\n",
    "    # Humidity check\n",
    "    if 60 <= row['Humidity_pct'] <= 80:\n",
    "        score += 1  # Good\n",
    "    elif 40 <= row['Humidity_pct'] < 60 or 80 < row['Humidity_pct'] <= 90:\n",
    "        score += 0  # Moderate\n",
    "    else:\n",
    "        score -= 1  # Bad\n",
    "\n",
    "    # Precipitation check\n",
    "    if 10 <= row['Precipitation_mm'] <= 12:\n",
    "        score += 1  # Good\n",
    "    elif 5 <= row['Precipitation_mm'] < 10 or 12 < row['Precipitation_mm'] <= 14:\n",
    "        score += 0  # Moderate\n",
    "    else:\n",
    "        score -= 1  # Bad\n",
    "\n",
    "    # Wind Speed check\n",
    "    if row['Wind_Speed_kmh'] <= 10:\n",
    "        score += 1  # Good\n",
    "    elif 10 < row['Wind_Speed_kmh'] <= 20:\n",
    "        score += 0  # Moderate\n",
    "    else:\n",
    "        score -= 1  # Bad\n",
    "\n",
    "    # Final results based on score\n",
    "    if score >= 3:\n",
    "        return \"Good\"\n",
    "    elif score == 2:\n",
    "        return \"Moderate\"\n",
    "    else:\n",
    "        return \"Bad\"\n",
    "\n",
    "# Apply the function to create the new 'Crop_Yield' column\n",
    "data['Crop_Yield'] = data.apply(categorize_yield, axis=1)\n",
    "\n",
    "# Display results\n",
    "print(\"\\nUpdated Dataset with Crop Yield:\")\n",
    "print(data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e0dc64be-3384-4607-8320-b5a44554e1ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Count of Crop Yield Categories:\n",
      "Crop_Yield\n",
      "Bad         936798\n",
      "Moderate     51285\n",
      "Good         11917\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Number of Bad Crop Yields: 936798\n",
      "Number of Moderate Crop Yields: 51285\n",
      "Number of Good Crop Yields: 11917\n"
     ]
    }
   ],
   "source": [
    "# Count the occurrences of each crop yield category\n",
    "yield_counts = data['Crop_Yield'].value_counts()\n",
    "\n",
    "# Display the counts for each category\n",
    "print(\"\\nCount of Crop Yield Categories:\")\n",
    "print(yield_counts)\n",
    "\n",
    "# Optionally, you can also print them separately\n",
    "bad_count = yield_counts.get('Bad', 0)\n",
    "moderate_count = yield_counts.get('Moderate', 0)\n",
    "good_count = yield_counts.get('Good', 0)\n",
    "\n",
    "print(f\"\\nNumber of Bad Crop Yields: {bad_count}\")\n",
    "print(f\"Number of Moderate Crop Yields: {moderate_count}\")\n",
    "print(f\"Number of Good Crop Yields: {good_count}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5d589315-391e-4fec-8c47-8327acf22219",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Count of Crop Yield Categories by Location:\n",
      "Crop_Yield      Bad  Good  Moderate\n",
      "Location                           \n",
      "Chicago       94087  1077      5000\n",
      "Dallas        93875  1124      4937\n",
      "Houston       93968  1141      4967\n",
      "Los Angeles   93802  1090      5030\n",
      "New York      93935  1117      4920\n",
      "Philadelphia  93983  1172      4967\n",
      "Phoenix       91932  1905      6372\n",
      "San Antonio   93797  1081      5084\n",
      "San Diego     93740  1095      4939\n",
      "San Jose      93679  1115      5069\n"
     ]
    }
   ],
   "source": [
    "# Group the data by 'Location' and count occurrences of each crop yield category\n",
    "location_yield_counts = data.groupby('Location')['Crop_Yield'].value_counts().unstack(fill_value=0)\n",
    "\n",
    "# Display the counts for each location\n",
    "print(\"\\nCount of Crop Yield Categories by Location:\")\n",
    "print(location_yield_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2767e2b3-a547-4886-adc7-ae724f5d4e09",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Count of Crop Yield Categories by Location and Month:\n",
      "Crop_Yield                Bad  Good  Moderate\n",
      "Location     YearMonth                       \n",
      "Chicago      2024-01    21038   226      1070\n",
      "             2024-02    19539   225      1044\n",
      "             2024-03    21050   242      1113\n",
      "             2024-04    20256   243      1073\n",
      "             2024-05    12204   141       700\n",
      "Dallas       2024-01    20871   260      1118\n",
      "             2024-02    19808   247      1010\n",
      "             2024-03    20934   240      1099\n",
      "             2024-04    20216   221      1082\n",
      "             2024-05    12046   156       628\n",
      "Houston      2024-01    20932   265      1091\n",
      "             2024-02    19533   250      1059\n",
      "             2024-03    21191   253      1129\n",
      "             2024-04    20341   229      1066\n",
      "             2024-05    11971   144       622\n",
      "Los Angeles  2024-01    21039   232      1120\n",
      "             2024-02    19515   234      1062\n",
      "             2024-03    20639   272      1160\n",
      "             2024-04    20371   215      1080\n",
      "             2024-05    12238   137       608\n",
      "New York     2024-01    20824   239      1093\n",
      "             2024-02    19683   240      1004\n",
      "             2024-03    21016   255      1133\n",
      "             2024-04    20308   249      1079\n",
      "             2024-05    12104   134       611\n",
      "Philadelphia 2024-01    20945   220      1194\n",
      "             2024-02    19236   241      1046\n",
      "             2024-03    20945   266      1075\n",
      "             2024-04    20661   267      1055\n",
      "             2024-05    12196   178       597\n",
      "Phoenix      2024-01    20268   635      1766\n",
      "             2024-02    18639   603      1737\n",
      "             2024-03    21096   248      1107\n",
      "             2024-04    20031   263      1099\n",
      "             2024-05    11898   156       663\n",
      "San Antonio  2024-01    20979   234      1098\n",
      "             2024-02    19475   230      1055\n",
      "             2024-03    20827   257      1144\n",
      "             2024-04    20590   223      1140\n",
      "             2024-05    11926   137       647\n",
      "San Diego    2024-01    20788   242      1155\n",
      "             2024-02    19731   241      1021\n",
      "             2024-03    20896   227      1026\n",
      "             2024-04    20456   249      1065\n",
      "             2024-05    11869   136       672\n",
      "San Jose     2024-01    20952   246      1150\n",
      "             2024-02    19480   223      1067\n",
      "             2024-03    20881   256      1095\n",
      "             2024-04    20339   246      1091\n",
      "             2024-05    12027   144       666\n"
     ]
    }
   ],
   "source": [
    "# Convert the 'Date' column to datetime format, specifying the appropriate format\n",
    "data['Date_Time'] = pd.to_datetime(data['Date_Time'], format='%m/%d/%Y')\n",
    "\n",
    "# Extract the year and month from the 'Date' column\n",
    "data['YearMonth'] = data['Date_Time'].dt.to_period('M')\n",
    "\n",
    "# Group the data by 'Location' and 'YearMonth' and count occurrences of each crop yield category\n",
    "monthly_location_yield_counts = (\n",
    "    data.groupby(['Location', 'YearMonth'])['Crop_Yield']\n",
    "    .value_counts()\n",
    "    .unstack(fill_value=0)\n",
    ")\n",
    "\n",
    "# Display the counts for each location and month\n",
    "print(\"\\nCount of Crop Yield Categories by Location and Month:\")\n",
    "print(monthly_location_yield_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8af0158d-49a7-473d-87f2-3797f9948174",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Count of Crop Yield Categories by Location and Month:\n",
      "Crop_Yield  Bad  Good  Moderate\n",
      "2024-01       0     0         0\n",
      "2024-02       0     0         0\n",
      "2024-03       0     0         0\n",
      "2024-04       0     0         0\n",
      "2024-05       0     0         0\n"
     ]
    }
   ],
   "source": [
    "# Other processing code...\n",
    "\n",
    "# Convert the 'Date' column to datetime format, specifying the appropriate format\n",
    "data['Date_Time'] = pd.to_datetime(data['Date_Time'], format='%m/%d/%Y')\n",
    "\n",
    "# Extract the year and month from the 'Date' column\n",
    "data['YearMonth'] = data['Date_Time'].dt.to_period('M')\n",
    "\n",
    "# Group the data by 'Location' and 'YearMonth' and count occurrences of each crop yield category\n",
    "monthly_location_yield_counts = (\n",
    "    data.groupby(['Location', 'YearMonth'])['Crop_Yield']\n",
    "    .value_counts()\n",
    "    .unstack(fill_value=0)\n",
    ")\n",
    "\n",
    "# Reindex to include all months if any are missing\n",
    "all_months = pd.period_range(start=data['YearMonth'].min(), end=data['YearMonth'].max(), freq='M')\n",
    "monthly_location_yield_counts = monthly_location_yield_counts.reindex(all_months, fill_value=0)\n",
    "\n",
    "# Display the counts for each location and month\n",
    "print(\"\\nCount of Crop Yield Categories by Location and Month:\")\n",
    "print(monthly_location_yield_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9ed250f2-72b8-4047-8d51-ddc9b2a9f464",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Overview:\n",
      "  Location  Date_Time  Temperature_C  Humidity_pct  Precipitation_mm  \\\n",
      "0  Chicago 2024-01-06      26.786811     31.513614          0.496024   \n",
      "1  Chicago 2024-04-16      17.587820     32.817923          0.128803   \n",
      "2  Chicago 2024-04-01      -2.562660     30.356593          2.624328   \n",
      "3  Chicago 2024-04-03       7.166150     50.377273          4.669553   \n",
      "4  Chicago 2024-04-05      38.386233     74.049712          6.792913   \n",
      "\n",
      "   Wind_Speed_kmh Crop_Yield YearMonth  Crop_Yield_Numeric  \n",
      "0       22.980095        Bad   2024-01                  -1  \n",
      "1        0.234146        Bad   2024-04                  -1  \n",
      "2        2.601357        Bad   2024-04                  -1  \n",
      "3       11.841165        Bad   2024-04                  -1  \n",
      "4        3.292467        Bad   2024-04                  -1  \n",
      "\n",
      "Correlation Matrix:\n",
      "                    Temperature_C  Humidity_pct  Precipitation_mm  \\\n",
      "Temperature_C            1.000000     -0.001344         -0.010876   \n",
      "Humidity_pct            -0.001344      1.000000         -0.000264   \n",
      "Precipitation_mm        -0.010876     -0.000264          1.000000   \n",
      "Wind_Speed_kmh          -0.001273     -0.000642          0.000981   \n",
      "Crop_Yield_Numeric       0.087408      0.113131          0.151850   \n",
      "\n",
      "                    Wind_Speed_kmh  Crop_Yield_Numeric  \n",
      "Temperature_C            -0.001273            0.087408  \n",
      "Humidity_pct             -0.000642            0.113131  \n",
      "Precipitation_mm          0.000981            0.151850  \n",
      "Wind_Speed_kmh            1.000000           -0.237749  \n",
      "Crop_Yield_Numeric       -0.237749            1.000000  \n"
     ]
    },
    {
     "data": {
      "image/png": "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nyTl3ZJLI0aMwC+//IIVK1YgJiYGw4cPR0JCAgYMGADg7ch/t27dFP2DgoJgY2ODnj174urVqzhy5AhGjx6NXr168UJZIiIiIiJt6NSpEx49eoQpU6YgMTERVatWxe7du+Hi4gIASExMREJCgqK/ubk5IiIiMHjwYHh7e8PGxgYdO3bE//73v3yLkXeUJa3gHWV1B+8oqzt4R1ki9XhHWd2h1TvK7luZZ9sybtYzz7alKzhST0RERES6T4t3lC0MWFNPRERERFTIcaSeiIiIiHSfjGPRmjCpJyIiIiKdJ1h+oxE/8hARERERFXIcqSciIiIi3SdxLFoTJvVEREREpPuY1GvEs0NEREREVMhxpJ6IiIiIdB4vlNWMST0RERER6T6W32jEs0NEREREVMhxpJ6IiIiIdB/LbzRiUk9EREREuo93lNWIZ4eIiIiIqJDjSD0RERER6TzOfqMZk3oiIiIi0n2c/UYjnh0iIiIiokKOI/VEREREpPMER+o1YlJPRERERLqPNfUa8SMPEREREVEhx5F6IiIiItJ5LL/RjEk9EREREek+lt9oxI88RERERESFHEfqSSvkGULbIdC/ji++qO0Q6F/1B1TXdgj0L74udIuZCf9m6A4tjpaz/EYjJvVEREREpPN4R1nN+JGHiIiIiKiQ40g9EREREek+lt9oxKSeiIiIiHSe0GY9fyHAjzxERERERIUcR+qJiIiISOfx5lOaMaknIiIiIt3HpF4jnh0iIiIiokKOI/VEREREpPM4T71mTOqJiIiISOexpl4znh0iIiIiokKOI/VEREREpPtYfqMRk3oiIiIi0nksv9GMZ4eIiIiIqJDjSD0RERER6TwBlt9owqSeiIiIiHQey28049khIiIiIirkOFJPRERERLqPs99oxKSeiIiIiHSeYIGJRjw7RERERESFHEfqiYiIiEjnCZbfaMSknoiIiIh0Hme/0Yxnh4iIiIiokONIPRERERHpPN58SjMm9URERESk81h+oxnPDhERERFRIceReiIiIiLSeZz9RjOO1BMRERGRzhOQ8mz5EAsXLoSbmxuMjY3h5eWFo0eP5mi948ePQ19fHzVr1vyg/eYUk3oiIiIiIg02btyIYcOG4fvvv8eFCxfQoEEDNG/eHAkJCRrXe/bsGbp164aAgIB8j5FJPRERERHpPCHJ8mzJrblz56J3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IiKiQo4j9URERESk83ihrGZM6omIiIhI58lZf6MRy2+IiIiIiAo5jtQTERERkc5j+Y1mTOqJiIiISOcxqdeM5TdERERERIUcR+qJiIiISOfJOVSvEZN6IiIiItJ5Qq7tCHQby2+IiIiIiAo5jtQTERERkc4TLL/RiEk9EREREek8OctvNGL5DRERERFRIceReiIiIiLSeSy/0Ywj9URERESk8+Qi75YPsXDhQri5ucHY2BheXl44evSoxv6HDx+Gl5cXjI2N4e7ujsWLF3/YjnOII/WkFaWdjLQdAv3L0EDSdgj0LzMTjkLpitDPlmo7BHpH8J5+2g6BFK5pOwCt2LhxI4YNG4aFCxeifv36WLJkCZo3b46rV6+ibNmyKv3j4uLQokUL9O3bF2vXrsXx48cxcOBAlCpVCh06dMiXGDlST0REREQ6T8hFni25NXfuXPTu3Rt9+vSBp6cnwsLC4OzsjEWLFqntv3jxYpQtWxZhYWHw9PREnz590KtXL8yePftjT0O2mNQTERERkc4TIu+W1NRUJCcnKy2pqalq9/vmzRucO3cOzZo1U2pv1qwZTpw4oXadkydPqvQPDAzE2bNnkZaWljcnJAsm9URERERUrISGhsLS0lJpCQ0NVdv34cOHyMjIgL29vVK7vb09kpKS1K6TlJSktn96ejoePnyYNweRBWvqiYiIiEjnyT/0Clc1goODMWLECKU2IyPN1/tJkvI1aEIIlbb39VfXnleY1BMRERGRzsvLKS2NjIzfm8RnsrW1hZ6ensqo/P3791VG4zM5ODio7a+vrw8bG5sPC/o9WH5DRERERJQNQ0NDeHl5ISIiQqk9IiICvr6+atfx8fFR6b9v3z54e3vDwMAgX+JkUk9EREREOk/I827JrREjRuCXX37BihUrEBMTg+HDhyMhIQEDBgwA8Lacp1u3bor+AwYMwK1btzBixAjExMRgxYoVWL58OUaNGpVXp0MFy2+IiIiISOfJtXhH2U6dOuHRo0eYMmUKEhMTUbVqVezevRsuLi4AgMTERCQkJCj6u7m5Yffu3Rg+fDh+/vlnODk54ccff8y3OeoBJvVERERERO81cOBADBw4UO1j4eHhKm1+fn44f/58Pkf1Hyb1RERERKTz8vJC2aKIST0RERER6by8nNKyKOKFskREREREhRxH6omIiIhI57H6RjMm9URE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",
      "text/plain": [
       "<Figure size 800x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Display the first few rows of the dataset to understand its structure\n",
    "print(\"Dataset Overview:\")\n",
    "print(data.head())\n",
    "\n",
    "# Assume the dataset has the following relevant columns: 'Temperature', 'Humidity', 'Precipitation', 'WindSpeed', 'Crop_Yield'\n",
    "\n",
    "# Convert categorical crop yield to numerical values if necessary (e.g., Good=1, Moderate=0, Bad=-1)\n",
    "def yield_to_numeric(yield_category):\n",
    "    if yield_category == \"Good\":\n",
    "        return 1\n",
    "    elif yield_category == \"Moderate\":\n",
    "        return 0\n",
    "    elif yield_category == \"Bad\":\n",
    "        return -1\n",
    "    else:\n",
    "        return None  # Handle unexpected values\n",
    "\n",
    "data['Crop_Yield_Numeric'] = data['Crop_Yield'].apply(yield_to_numeric)\n",
    "\n",
    "# Drop any rows with missing values in the relevant columns\n",
    "relevant_columns = ['Temperature_C', 'Humidity_pct', 'Precipitation_mm', 'Wind_Speed_kmh', 'Crop_Yield_Numeric']\n",
    "data_subset = data[relevant_columns].dropna()\n",
    "\n",
    "# Calculate the correlation matrix\n",
    "correlation_matrix = data_subset.corr()\n",
    "\n",
    "# Print the correlation matrix\n",
    "print(\"\\nCorrelation Matrix:\")\n",
    "print(correlation_matrix)\n",
    "\n",
    "# Plot the correlation matrix as a heatmap\n",
    "plt.figure(figsize=(8, 5))\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')\n",
    "plt.title('Correlation Matrix between Weather Attributes and Crop Yield')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6394b9d-9823-43e5-8e21-de04633e6f5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "The graph is a correlation matrix showing the relationships between different weather attributes and crop yield. Here’s what it tells us:\n",
    "\n",
    "Temperature_C (Temperature in Celsius)\n",
    "\n",
    "Has no significant correlation with Humidity, Precipitation, or Wind Speed (values close to 0).\n",
    "Has a weak positive correlation (0.09) with Crop Yield, meaning temperature might have a slight impact on yield, but it's not strong.\n",
    "Humidity_pct (Humidity Percentage)\n",
    "\n",
    "No strong correlation with Temperature or Wind Speed.\n",
    "Slight correlation with Precipitation (blue shade indicates a weak relationship).\n",
    "Almost no direct correlation with Crop Yield.\n",
    "Precipitation_mm (Rainfall in mm)\n",
    "\n",
    "Positively correlated with Humidity (makes sense—more rainfall increases humidity).\n",
    "Weak correlation with Crop Yield (light blue means a small positive relationship).\n",
    "Wind_Speed_kmh (Wind Speed in km/h)\n",
    "\n",
    "No strong correlation with Temperature, Humidity, or Precipitation.\n",
    "Negatively correlated with Crop Yield (dark blue), meaning higher wind speeds might lower crop yield.\n",
    "Crop_Yield_Numeric (Crop Yield in numeric form)\n",
    "\n",
    "Slight positive correlation with Temperature and Precipitation.\n",
    "Noticeable negative correlation with Wind Speed, meaning strong winds could harm crop yield.\n",
    "Key Insights:\n",
    "Wind Speed appears to negatively impact Crop Yield the most.\n",
    "Temperature and Precipitation have a slight positive effect on Crop Yield, but not strongly.\n",
    "Humidity doesn’t seem to play a major role in crop yield variations.\n",
    "Would you like a deeper statistical analysis or recommendations based on these findings?\n",
    "\n",
    "\n",
    "Since the correlation matrix suggests Wind Speed negatively impacts Crop Yield while Temperature and Precipitation have slight positive effects, here are some deeper insights and possible actions:\n",
    "\n",
    "1. Statistical Insights\n",
    "Wind Speed & Crop Yield (- correlation):\n",
    "\n",
    "Strong winds can damage crops, reduce pollination, and increase evaporation.\n",
    "If this correlation is significant (p-value < 0.05), reducing wind exposure (e.g., using windbreaks) might improve yields.\n",
    "Temperature & Crop Yield (+ weak correlation):\n",
    "\n",
    "Crop growth might slightly benefit from higher temperatures, but the weak correlation suggests other factors play a larger role.\n",
    "Precipitation & Crop Yield (+ weak correlation):\n",
    "\n",
    "More rainfall generally supports crop growth but might not be the main driver of yield changes.\n",
    "2. Recommendations for Farmers & Agricultural Planners\n",
    "✅ Mitigating Wind Impact:\n",
    "\n",
    "Plant windbreaks (trees/shrubs) around fields to reduce wind damage.\n",
    "Use cover crops to prevent soil erosion.\n",
    "✅ Optimizing Irrigation & Water Management:\n",
    "\n",
    "If rainfall isn’t strongly boosting yield, supplemental irrigation could help.\n",
    "Drip irrigation can ensure plants get the right amount of water without over-relying on rainfall.\n",
    "✅ Temperature Monitoring & Crop Selection:\n",
    "\n",
    "If growing in warmer regions, heat-resistant crop varieties could be beneficial.\n",
    "Use shade nets or mulching to regulate soil temperature."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
